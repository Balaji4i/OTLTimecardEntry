package model.am;

import model.am.common.Naresco_AM;

import model.rovo.AddEdit_ROVOImpl;
import model.rovo.CopyPaste_ROVOImpl;
import model.rovo.Jobs_ROVOImpl;
import model.rovo.Project_ROVOImpl;
import model.rovo.Search_ROVOImpl;

import model.rovo.UserAcess_ROVOImpl;

import model.rovo.UserRole_ROVOImpl;

import model.vo.TIME_CARD_MASTER_VOImpl;

import model.vo.XXSC_TIME_CARD_DTL_VOImpl;

import oracle.adf.share.ADFContext;

import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jan 14 12:52:14 IST 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class Naresco_AMImpl extends ApplicationModuleImpl implements Naresco_AM {
    /**
     * This is the default constructor (do not remove).
     */
    public Naresco_AMImpl() {
    }

    /**
     * Container's getter for TIME_CARD_MASTER_VO.
     * @return TIME_CARD_MASTER_VO
     */
    public TIME_CARD_MASTER_VOImpl getTIME_CARD_MASTER_VO() {
        return (TIME_CARD_MASTER_VOImpl) findViewObject("TIME_CARD_MASTER_VO");
    }

    /**
     * Container's getter for XXSC_TIME_CARD_DTL_VO.
     * @return XXSC_TIME_CARD_DTL_VO
     */
    public XXSC_TIME_CARD_DTL_VOImpl getXXSC_TIME_CARD_DTL_VO() {
        return (XXSC_TIME_CARD_DTL_VOImpl) findViewObject("XXSC_TIME_CARD_DTL_VO");
    }


    /**
     * Container's getter for Jobs_ROVO.
     * @return Jobs_ROVO
     */
    public Jobs_ROVOImpl getJobs_ROVO() {
        return (Jobs_ROVOImpl) findViewObject("Jobs_ROVO");
    }

    /**
     * Container's getter for AddEdit_ROVO.
     * @return AddEdit_ROVO
     */
    public AddEdit_ROVOImpl getAddEdit_ROVO() {
        return (AddEdit_ROVOImpl) findViewObject("AddEdit_ROVO");
    }

    /**
     * Container's getter for Search_ROVO.
     * @return Search_ROVO
     */
    public Search_ROVOImpl getSearch_ROVO() {
        return (Search_ROVOImpl) findViewObject("Search_ROVO");
    }

    /**
     * Container's getter for Project_ROVO.
     * @return Project_ROVO
     */
    public Project_ROVOImpl getProject_ROVO() {
        return (Project_ROVOImpl) findViewObject("Project_ROVO");
    }

    /**
     * Container's getter for TimeCardHeader_VL.
     * @return TimeCardHeader_VL
     */
    public ViewLinkImpl getTimeCardHeader_VL() {
        return (ViewLinkImpl) findViewLink("TimeCardHeader_VL");
    }

    /**
     * Container's getter for UserAcess_ROVO1.
     * @return UserAcess_ROVO1
     */
    public UserAcess_ROVOImpl getUserAcess_ROVO() {
        return (UserAcess_ROVOImpl) findViewObject("UserAcess_ROVO");
    }

    /**
     * Container's getter for CopyPaste_ROVO1.
     * @return CopyPaste_ROVO1
     */
    public CopyPaste_ROVOImpl getCopyPaste_ROVO() {
        return (CopyPaste_ROVOImpl) findViewObject("CopyPaste_ROVO");
    }

    /**
     * Container's getter for XXSC_TIME_CARD_DTL_VO1.
     * @return XXSC_TIME_CARD_DTL_VO1
     */
    public XXSC_TIME_CARD_DTL_VOImpl getXXSC_TIME_CARD_DTL_VO1() {
        return (XXSC_TIME_CARD_DTL_VOImpl) findViewObject("XXSC_TIME_CARD_DTL_VO1");
    }
    public void dataFilter(){
        
        String userName= ADFContext.getCurrent()
                                    .getSessionScope()
                                    .get("userName")
                                    .toString();
        System.out.println(userName +"-----userName");
        ViewObjectImpl vo = this.getUserRole_ROVO();
        ViewCriteria vc = vo.createViewCriteria();
        ViewCriteriaRow vcRow = vc.createViewCriteriaRow();
        vcRow.setAttribute("Username", userName);
        vc.addRow(vcRow);
        vo.applyViewCriteria(vc);
        vo.executeQuery();
        System.out.println(vo.getEstimatedRowCount() +"--- EsT RoW Count");
        String filterUserName=null;
        String role="unknown_User";
        if(vo.getEstimatedRowCount() > 0 ){
             role =
            vo.first().getAttribute("RoleName") ==
             null ? "" :
             vo.first().getAttribute("RoleName").toString();
           
            if(role.equals("OTL Timekeeper")){
                filterUserName=userName;
                
            }
          
        }
        else{
            filterUserName=userName;
        }
        
       
        System.out.println(filterUserName +"-----------------filterUserName");
        ADFContext.getCurrent().getSessionScope().put("filterUserName",filterUserName);
        System.out.println(role +"----------------Role");
        ADFContext.getCurrent().getSessionScope().put("RoleName",role);
        
        
        ViewObjectImpl HdrVO = this.getTIME_CARD_MASTER_VO();
        ViewCriteria viewCriteria = HdrVO.getViewCriteria("findByNextApprover");
        HdrVO.applyViewCriteria(viewCriteria);
        HdrVO.setNamedWhereClauseParam("BV_NEXT_Approver",userName);
        HdrVO.executeQuery();
        System.out.println(HdrVO.getEstimatedRowCount() +"--- HdrVo RoW Count");
    }

    /**
     * Container's getter for UserRole_ROVO1.
     * @return UserRole_ROVO1
     */
    public UserRole_ROVOImpl getUserRole_ROVO() {
        return (UserRole_ROVOImpl) findViewObject("UserRole_ROVO");
    }

    /**
     * Container's getter for Lookup_ROVO1.
     * @return Lookup_ROVO1
     */
    public ViewObjectImpl getLookup_ROVO1() {
        return (ViewObjectImpl) findViewObject("Lookup_ROVO1");
    }
}

